/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 2.0.0
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * TOOLS INDEX
 * -----------
 * 
 * This directory contains SCSS utilities, functions, and mixins
 * organized into logical groupings for better maintainability.
 * 
 * The tools directory includes:
 * - Unit Conversion: Functions for converting between CSS units
 * - Layout: Layout-related functions and mixins
 * - Breakpoints: Responsive media query mixins
 * - Accessibility: A11y-focused mixins
 * - Text: Text manipulation utilities
 * 
 * Note: CSS variable generation has been moved to config files
 * 
 * USAGE:
 * @use "../tools" as tools;
 * 
 * // Unit conversion
 * $rem-value: tools.px-to-rem(16px);
 * 
 * // Breakpoints
 * @include tools.breakpoint("md") { ... }
 * 
 * // Layout utilities
 * @include tools.aspect-ratio(16/9);
 * 
 * // Accessibility
 * @include tools.visually-hidden;
 * 
 * // Text utilities
 * @include tools.truncate-text;
 */
/**
 * UNIT CONVERSION FUNCTIONS
 * -------------------------
 * 
 * Utility functions for converting between different CSS units
 * 
 * USAGE:
 * @use "../tools/unit-conversion" as units;
 * $rem-value: units.px-to-rem(16px);
 * $px-value: units.rem-to-px(1.5rem);
 * $unitless: units.strip-unit(16px);
 */
/**
 * Strip units from a value
 * @param {Number} $value - Value with units
 * @return {Number} - Value without units
 * @example $unitless: strip-unit(16px); // Returns 16
 */
/**
 * Convert px to rem
 * @param {Number} $px - Pixel value to convert
 * @param {Number} $base-font-size - Base font size (default: 16px)
 * @return {Number} - Value in rem units
 * @example $rem: px-to-rem(24px); // Returns 1.5rem
 */
/**
 * Convert rem to px
 * @param {Number} $rem - Rem value to convert
 * @param {Number} $base-font-size - Base font size (default: 16px)
 * @return {Number} - Value in px units
 * @example $px: rem-to-px(1.5rem); // Returns 24px
 */
/**
 * TOOLS INDEX
 * -----------
 * 
 * This directory contains SCSS utilities, functions, and mixins
 * organized into logical groupings for better maintainability.
 * 
 * The tools directory includes:
 * - Unit Conversion: Functions for converting between CSS units
 * - Layout: Layout-related functions and mixins
 * - Breakpoints: Responsive media query mixins
 * - Accessibility: A11y-focused mixins
 * - Text: Text manipulation utilities
 * 
 * Note: CSS variable generation has been moved to config files
 * 
 * USAGE:
 * @use "../tools" as tools;
 * 
 * // Unit conversion
 * $rem-value: tools.px-to-rem(16px);
 * 
 * // Breakpoints
 * @include tools.breakpoint("md") { ... }
 * 
 * // Layout utilities
 * @include tools.aspect-ratio(16/9);
 * 
 * // Accessibility
 * @include tools.visually-hidden;
 * 
 * // Text utilities
 * @include tools.truncate-text;
 */
/**
 * LAYOUT UTILITIES
 * ----------------
 * 
 * Functions and mixins for layout-related calculations and utilities
 * 
 * USAGE:
 * @use "../tools/layout" as layout;
 * $fluid: layout.fluid-space(1rem, 2rem, 320px, 1200px);
 * @include layout.aspect-ratio(16/9);
 * @include layout.clearfix;
 */
/**
 * Calculate fluid spacing between two breakpoints
 * @param {Number} $min-value - Minimum value
 * @param {Number} $max-value - Maximum value
 * @param {Number} $min-breakpoint - Minimum breakpoint
 * @param {Number} $max-breakpoint - Maximum breakpoint
 * @return {String} - CSS clamp() function
 * @example $fluid: fluid-space(1rem, 2rem, 320px, 1200px);
 */
/**
 * Aspect ratio mixin
 * @param {Number} $ratio - Aspect ratio (width/height)
 * @example @include aspect-ratio(16/9);
 */
/**
 * Clear fix for floated elements
 * @example @include clearfix;
 */
/**
 * BREAKPOINT MIXINS
 * -----------------
 * 
 * Responsive breakpoint utilities for media queries
 * 
 * USAGE:
 * @use "../tools/breakpoints" as bp;
 * @include bp.breakpoint("md") { display: flex; }
 * @include bp.breakpoint-down("lg") { display: block; }
 */
/**
 * BREAKPOINTS CONFIGURATION
 * ------------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/breakpoints';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-breakpoint-variables();
 * 
 * 3. Use breakpoints in your SCSS:
 *    - Mixin:    @include breakpoint(md) { ... }     // Applies styles at 768px and above
 *    - Function: width: breakpoint(lg);              // Returns 992px
 *    - Variable: @media (min-width: var(--breakpoint-xl)) { ... }  // Use CSS variable
 * 
 * 4. Available breakpoint sizes:
 *    - xs: 375px
 *    - sm: 576px
 *    - md: 768px
 *    - lg: 992px
 *    - xl: 1200px
 *    - xxl: 1400px
 */
/**
 * Generate CSS breakpoint variables
 * Creates CSS custom properties for all breakpoint values
 * @example @include generate-breakpoint-variables();
 */
/**
 * Responsive breakpoint mixin
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint("md") { display: flex; }
 */
/**
 * ACCESSIBILITY MIXINS
 * --------------------
 * 
 * Mixins for improving accessibility and user experience
 * 
 * USAGE:
 * @use "../tools/accessibility" as a11y;
 * @include a11y.visually-hidden;
 * @include a11y.focus-ring;
 */
/**
 * COLOR CONFIGURATION
 * ------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/colors';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-color-variables();
 * 
 * 3. Use colors in your SCSS:
 *    - Function: color: color('primary');      // Returns #314459
 *    - Function: border: 1px solid color('primary-300');  // Uses shade variant
 *    - Function: background: color('primary-alpha-50');  // 50% opacity primary
 *    - Variable: background: var(--color-primary);  // Use CSS variable
 *    - Variable: background: var(--color-primary-alpha-30);  // 30% opacity CSS variable
 *    - Opacity: background: color-alpha('primary', 0.5);  // 50% opacity
 * 
 * 4. For theme variations:
 *    .dark-theme { background: var(--color-dark-800); }
 * 
 * 5. Alpha variants are automatically generated for main semantic colors only:
 *    - Main colors (primary, secondary, tertiary, danger, warning, success, info, black, white)
 *    - Get alpha variants from 10% to 90% opacity (10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%)
 *    - Usage: color('primary-alpha-30') for 30% opacity primary
 *    - CSS Variables: var(--color-primary-alpha-50) for 50% opacity
 *    - Variant colors (like primary-300, primary-tint) do NOT get alpha variants
 */
/**
 * Function to get color value
 * @param {String} $name - The color name from the $colors map
 * @return {Color} The color value
 * @example color: color('primary');      // Returns #314459
 */
/**
 * Function to get color with opacity
 * @param {String} $name - The color name from the $colors map
 * @param {Number} $alpha - Opacity value between 0 and 1
 * @return {Color} The rgba color value with opacity
 * @example background: color-alpha('primary', 0.5); // Returns rgba(49, 68, 89, 0.5)
 */
/**
 * Generate CSS color variables
 * Creates CSS custom properties for all colors in the $colors map
 * @example @include generate-color-variables();
 */
/**
 * Visually hidden mixin (for accessibility)
 * Hides element visually but keeps it available for screen readers
 * @example @include visually-hidden;
 */
/**
 * Focus ring mixin for better accessibility
 * @param {Color} $color - Focus ring color (optional)
 * @param {Number} $width - Focus ring width (optional)
 * @param {Number} $offset - Focus ring offset (optional)
 * @example @include focus-ring;
 */
/**
 * TEXT UTILITY MIXINS
 * -------------------
 * 
 * Mixins for text manipulation and display utilities
 * 
 * USAGE:
 * @use "../tools/text" as text;
 * @include text.truncate-text;
 * @include text.truncate-multiline(3);
 */
/**
 * Truncate text with ellipsis
 * @example @include truncate-text;
 */
/**
 * Multi-line text truncation
 * @param {Number} $lines - Number of lines to show
 * @example @include truncate-multiline(3);
 */
/**
 * Base Styles
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  font-size: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
  color: var(--color-black);
  background-color: var(--color-white);
}

h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl,
figure {
  margin: 0;
}

ul,
ol {
  padding: 0;
  list-style: none;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

a {
  color: var(--color-secondary);
  text-decoration: none;
}

button {
  background: none;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
}

:focus-visible {
  outline: 2px solid var(--color-secondary);
  outline-offset: 2px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-family-heading);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  margin-bottom: var(--spacing-4);
}

h1 {
  font-size: var(--font-size-4xl);
}

h2 {
  font-size: var(--font-size-3xl);
}

h3 {
  font-size: var(--font-size-2xl);
}

h4 {
  font-size: var(--font-size-xl);
}

h5 {
  font-size: var(--font-size-lg);
}

h6 {
  font-size: var(--font-size-base);
}

p {
  margin-bottom: var(--spacing-4);
}
p:last-child {
  margin-bottom: 0;
}

.lead {
  font-size: var(--font-size-xl);
  line-height: var(--line-height-snug);
}

a {
  color: var(--color-primary);
  text-decoration: underline;
  transition: color 0.2s;
}
a:hover {
  color: var(--color-primary-400);
}

.text-small {
  font-size: var(--font-size-sm);
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--button-default-padding-y) var(--button-default-padding-x);
  border-radius: var(--button-default-border-radius);
  font-family: var(--font-family-base);
  font-weight: var(--button-default-font-weight);
  font-size: var(--button-default-font-size);
  text-align: center;
  cursor: pointer;
  border: 1px solid transparent;
  transition: var(--button-default-transition);
}
.btn:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}
.btn--sm {
  padding: var(--button-sm-padding-y) var(--button-sm-padding-x);
  font-size: var(--button-sm-font-size);
}
.btn--lg {
  padding: var(--button-lg-padding-y) var(--button-lg-padding-x);
  font-size: var(--button-lg-font-size);
}
.btn--block {
  display: block;
  width: 100%;
}
.btn--primary {
  background-color: var(--color-primary);
  color: var(--color-primary-contrast);
  border-color: var(--color-primary);
}
.btn--primary:hover {
  background-color: var(--color-primary-tint);
  color: var(--color-primary-contrast);
  border-color: var(--color-primary-tint);
}
.btn--secondary {
  background-color: var(--color-secondary);
  color: var(--color-secondary-contrast);
  border-color: var(--color-secondary);
}
.btn--secondary:hover {
  background-color: var(--color-secondary-tint);
  color: var(--color-secondary-contrast);
  border-color: var(--color-secondary-tint);
}
.btn--danger {
  background-color: var(--color-danger);
  color: var(--color-danger-contrast);
  border-color: var(--color-danger);
}
.btn--danger:hover {
  background-color: var(--color-danger-tint);
  color: var(--color-danger-contrast);
  border-color: var(--color-danger-tint);
}
.btn--warning {
  background-color: var(--color-warning);
  color: var(--color-warning-contrast);
  border-color: var(--color-warning);
}
.btn--warning:hover {
  background-color: var(--color-warning-tint);
  color: var(--color-warning-contrast);
  border-color: var(--color-warning-tint);
}
.btn--success {
  background-color: var(--color-success);
  color: var(--color-success-contrast);
  border-color: var(--color-success);
}
.btn--success:hover {
  background-color: var(--color-success-tint);
  color: var(--color-success-contrast);
  border-color: var(--color-success-tint);
}
.btn--info {
  background-color: var(--color-info);
  color: var(--color-info-contrast);
  border-color: var(--color-info);
}
.btn--info:hover {
  background-color: var(--color-info-tint);
  color: var(--color-info-contrast);
  border-color: var(--color-info-tint);
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 2.0.0
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * CONTAINER CONFIGURATION
 * ----------------------
 * 
 * USAGE:
 * 1. Apply the container class to create a responsive, centered wrapper:
 *    <div class="container">Content goes here</div>
 * 
 * 2. Container variations:
 *    - Default: <div class="container">...</div> (max-width: 1200px)
 *    - Narrow: <div class="container container--narrow">...</div> (max-width: 800px)
 *    - Wide: <div class="container container--wide">...</div> (max-width: 1600px)
 *    - Fluid: <div class="container container--fluid">...</div> (max-width: 100%)
 * 
 * 3. Container padding is responsive and handled by CSS variables:
 *    - Large screens: var(--container-padding-lg)
 *    - Medium screens: var(--container-padding-md)
 *    - Small screens: var(--container-padding-sm)
 */
.container {
  width: 100%;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--container-padding-lg);
  padding-right: var(--container-padding-lg);
}
@media (max-width: 992px) {
  .container {
    padding-left: var(--container-padding-md);
    padding-right: var(--container-padding-md);
  }
}
@media (max-width: 768px) {
  .container {
    padding-left: var(--container-padding-sm);
    padding-right: var(--container-padding-sm);
  }
}
.container--narrow {
  max-width: 800px;
}
.container--wide {
  max-width: 1600px;
}
.container--fluid {
  max-width: 100%;
}

/**
 * Project: SMACSS SCSS Architecture
 * Description: This project implements a scalable and modular architecture for CSS (SMACSS) 
 *              using SCSS to ensure maintainable and reusable styles.
 * Author: Chris Javier Oliveros
 * Version: 2.0.0
 * License: MIT
 * 
 * This file serves as the entry point for the SCSS architecture. It organizes and imports 
 * all styles based on the SMACSS methodology.
 */
/**
 * GRID LAYOUT CONFIGURATION
 * -----------------------
 * 
 * USAGE:
 * 1. Apply the grid class to create a responsive grid layout:
 *    <div class="grid">
 *      <div>Item 1</div>
 *      <div>Item 2</div>
 *    </div>
 * 
 * 2. Column variations (responsive):
 *    - Two columns: <div class="grid grid--2-col">...</div>
 *      Mobile: 1 column, Tablet/Desktop: 2 columns
 *    
 *    - Three columns: <div class="grid grid--3-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 3 columns
 *    
 *    - Four columns: <div class="grid grid--4-col">...</div>
 *      Mobile: 1 column, Tablet: 2 columns, Desktop: 4 columns
 * 
 * 3. Gap variations:
 *    - Default: <div class="grid">...</div> (gap: spacing("4"))
 *    - Small: <div class="grid grid--gap-sm">...</div> (gap: spacing("2"))
 *    - Large: <div class="grid grid--gap-lg">...</div> (gap: spacing("8"))
 * 
 * 4. Auto-fit grid (for card layouts):
 *    <div class="grid grid--auto-fit">...</div>
 *    Creates a responsive grid that automatically fits columns based on available space
 */
.grid {
  display: grid;
  gap: var(--spacing-4);
}
.grid--gap-sm {
  gap: var(--spacing-2);
}
.grid--gap-lg {
  gap: var(--spacing-8);
}
.grid--2-col {
  grid-template-columns: 1fr;
}
@media (max-width: 768px) {
  .grid--2-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
.grid--3-col {
  grid-template-columns: 1fr;
}
@media (max-width: 768px) {
  .grid--3-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (max-width: 992px) {
  .grid--3-col {
    grid-template-columns: repeat(3, 1fr);
  }
}
.grid--4-col {
  grid-template-columns: 1fr;
}
@media (max-width: 768px) {
  .grid--4-col {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (max-width: 992px) {
  .grid--4-col {
    grid-template-columns: repeat(4, 1fr);
  }
}
.grid--auto-fit {
  grid-template-columns: repeat(auto-fit, minmax(min(100%, 18rem), 1fr));
}

.hero {
  background-color: var(--color-primary);
  color: var(--color-primary-contrast);
}

.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.justify-center {
  justify-content: center !important;
}

.align-center {
  align-items: center !important;
}

.d-none {
  display: none !important;
}

.d-block {
  display: block !important;
}

.d-flex {
  display: flex !important;
}

.text-center {
  text-align: center !important;
}

.text-left {
  text-align: left !important;
}

.text-right {
  text-align: right !important;
}

/**
 * SPACING CONFIGURATION
 * ---------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/spacing';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-spacing-variables();
 * 
 * 3. Use spacing in your SCSS:
 *    - Function: margin: spacing(4);      // Returns 1rem
 *    - Function: padding: spacing('sm');  // Returns 1rem using alias
 *    - Variable: gap: var(--spacing-6);   // Use CSS variable
 * 
 * 4. For container padding:
 *    padding: var(--container-padding-md); // Responsive padding
 */
/**
 * Function to get spacing value
 * @param {String|Number} $key - The spacing key or alias
 * @return {Number} The spacing value in rem
 * @example padding: spacing(4);      // Returns 1rem
 * @example margin: spacing('sm');    // Returns 1rem via alias
 */
/**
 * Generate CSS spacing variables
 * Creates CSS custom properties for all spacing values
 * @example @include generate-spacing-variables();
 */
.m-0 {
  margin: var(--spacing-0) !important;
}

.mt-0 {
  margin-top: var(--spacing-0) !important;
}

.mb-0 {
  margin-bottom: var(--spacing-0) !important;
}

.ml-0 {
  margin-left: var(--spacing-0) !important;
}

.mr-0 {
  margin-right: var(--spacing-0) !important;
}

.mx-0 {
  margin-left: var(--spacing-0) !important;
  margin-right: var(--spacing-0) !important;
}

.my-0 {
  margin-top: var(--spacing-0) !important;
  margin-bottom: var(--spacing-0) !important;
}

.m-1 {
  margin: var(--spacing-1) !important;
}

.mt-1 {
  margin-top: var(--spacing-1) !important;
}

.mb-1 {
  margin-bottom: var(--spacing-1) !important;
}

.ml-1 {
  margin-left: var(--spacing-1) !important;
}

.mr-1 {
  margin-right: var(--spacing-1) !important;
}

.mx-1 {
  margin-left: var(--spacing-1) !important;
  margin-right: var(--spacing-1) !important;
}

.my-1 {
  margin-top: var(--spacing-1) !important;
  margin-bottom: var(--spacing-1) !important;
}

.m-2 {
  margin: var(--spacing-2) !important;
}

.mt-2 {
  margin-top: var(--spacing-2) !important;
}

.mb-2 {
  margin-bottom: var(--spacing-2) !important;
}

.ml-2 {
  margin-left: var(--spacing-2) !important;
}

.mr-2 {
  margin-right: var(--spacing-2) !important;
}

.mx-2 {
  margin-left: var(--spacing-2) !important;
  margin-right: var(--spacing-2) !important;
}

.my-2 {
  margin-top: var(--spacing-2) !important;
  margin-bottom: var(--spacing-2) !important;
}

.m-3 {
  margin: var(--spacing-3) !important;
}

.mt-3 {
  margin-top: var(--spacing-3) !important;
}

.mb-3 {
  margin-bottom: var(--spacing-3) !important;
}

.ml-3 {
  margin-left: var(--spacing-3) !important;
}

.mr-3 {
  margin-right: var(--spacing-3) !important;
}

.mx-3 {
  margin-left: var(--spacing-3) !important;
  margin-right: var(--spacing-3) !important;
}

.my-3 {
  margin-top: var(--spacing-3) !important;
  margin-bottom: var(--spacing-3) !important;
}

.m-4 {
  margin: var(--spacing-4) !important;
}

.mt-4 {
  margin-top: var(--spacing-4) !important;
}

.mb-4 {
  margin-bottom: var(--spacing-4) !important;
}

.ml-4 {
  margin-left: var(--spacing-4) !important;
}

.mr-4 {
  margin-right: var(--spacing-4) !important;
}

.mx-4 {
  margin-left: var(--spacing-4) !important;
  margin-right: var(--spacing-4) !important;
}

.my-4 {
  margin-top: var(--spacing-4) !important;
  margin-bottom: var(--spacing-4) !important;
}

.m-5 {
  margin: var(--spacing-5) !important;
}

.mt-5 {
  margin-top: var(--spacing-5) !important;
}

.mb-5 {
  margin-bottom: var(--spacing-5) !important;
}

.ml-5 {
  margin-left: var(--spacing-5) !important;
}

.mr-5 {
  margin-right: var(--spacing-5) !important;
}

.mx-5 {
  margin-left: var(--spacing-5) !important;
  margin-right: var(--spacing-5) !important;
}

.my-5 {
  margin-top: var(--spacing-5) !important;
  margin-bottom: var(--spacing-5) !important;
}

.m-6 {
  margin: var(--spacing-6) !important;
}

.mt-6 {
  margin-top: var(--spacing-6) !important;
}

.mb-6 {
  margin-bottom: var(--spacing-6) !important;
}

.ml-6 {
  margin-left: var(--spacing-6) !important;
}

.mr-6 {
  margin-right: var(--spacing-6) !important;
}

.mx-6 {
  margin-left: var(--spacing-6) !important;
  margin-right: var(--spacing-6) !important;
}

.my-6 {
  margin-top: var(--spacing-6) !important;
  margin-bottom: var(--spacing-6) !important;
}

.m-8 {
  margin: var(--spacing-8) !important;
}

.mt-8 {
  margin-top: var(--spacing-8) !important;
}

.mb-8 {
  margin-bottom: var(--spacing-8) !important;
}

.ml-8 {
  margin-left: var(--spacing-8) !important;
}

.mr-8 {
  margin-right: var(--spacing-8) !important;
}

.mx-8 {
  margin-left: var(--spacing-8) !important;
  margin-right: var(--spacing-8) !important;
}

.my-8 {
  margin-top: var(--spacing-8) !important;
  margin-bottom: var(--spacing-8) !important;
}

.m-10 {
  margin: var(--spacing-10) !important;
}

.mt-10 {
  margin-top: var(--spacing-10) !important;
}

.mb-10 {
  margin-bottom: var(--spacing-10) !important;
}

.ml-10 {
  margin-left: var(--spacing-10) !important;
}

.mr-10 {
  margin-right: var(--spacing-10) !important;
}

.mx-10 {
  margin-left: var(--spacing-10) !important;
  margin-right: var(--spacing-10) !important;
}

.my-10 {
  margin-top: var(--spacing-10) !important;
  margin-bottom: var(--spacing-10) !important;
}

.m-12 {
  margin: var(--spacing-12) !important;
}

.mt-12 {
  margin-top: var(--spacing-12) !important;
}

.mb-12 {
  margin-bottom: var(--spacing-12) !important;
}

.ml-12 {
  margin-left: var(--spacing-12) !important;
}

.mr-12 {
  margin-right: var(--spacing-12) !important;
}

.mx-12 {
  margin-left: var(--spacing-12) !important;
  margin-right: var(--spacing-12) !important;
}

.my-12 {
  margin-top: var(--spacing-12) !important;
  margin-bottom: var(--spacing-12) !important;
}

.m-16 {
  margin: var(--spacing-16) !important;
}

.mt-16 {
  margin-top: var(--spacing-16) !important;
}

.mb-16 {
  margin-bottom: var(--spacing-16) !important;
}

.ml-16 {
  margin-left: var(--spacing-16) !important;
}

.mr-16 {
  margin-right: var(--spacing-16) !important;
}

.mx-16 {
  margin-left: var(--spacing-16) !important;
  margin-right: var(--spacing-16) !important;
}

.my-16 {
  margin-top: var(--spacing-16) !important;
  margin-bottom: var(--spacing-16) !important;
}

.p-0 {
  padding: var(--spacing-0) !important;
}

.pt-0 {
  padding-top: var(--spacing-0) !important;
}

.pb-0 {
  padding-bottom: var(--spacing-0) !important;
}

.pl-0 {
  padding-left: var(--spacing-0) !important;
}

.pr-0 {
  padding-right: var(--spacing-0) !important;
}

.px-0 {
  padding-left: var(--spacing-0) !important;
  padding-right: var(--spacing-0) !important;
}

.py-0 {
  padding-top: var(--spacing-0) !important;
  padding-bottom: var(--spacing-0) !important;
}

.p-1 {
  padding: var(--spacing-1) !important;
}

.pt-1 {
  padding-top: var(--spacing-1) !important;
}

.pb-1 {
  padding-bottom: var(--spacing-1) !important;
}

.pl-1 {
  padding-left: var(--spacing-1) !important;
}

.pr-1 {
  padding-right: var(--spacing-1) !important;
}

.px-1 {
  padding-left: var(--spacing-1) !important;
  padding-right: var(--spacing-1) !important;
}

.py-1 {
  padding-top: var(--spacing-1) !important;
  padding-bottom: var(--spacing-1) !important;
}

.p-2 {
  padding: var(--spacing-2) !important;
}

.pt-2 {
  padding-top: var(--spacing-2) !important;
}

.pb-2 {
  padding-bottom: var(--spacing-2) !important;
}

.pl-2 {
  padding-left: var(--spacing-2) !important;
}

.pr-2 {
  padding-right: var(--spacing-2) !important;
}

.px-2 {
  padding-left: var(--spacing-2) !important;
  padding-right: var(--spacing-2) !important;
}

.py-2 {
  padding-top: var(--spacing-2) !important;
  padding-bottom: var(--spacing-2) !important;
}

.p-3 {
  padding: var(--spacing-3) !important;
}

.pt-3 {
  padding-top: var(--spacing-3) !important;
}

.pb-3 {
  padding-bottom: var(--spacing-3) !important;
}

.pl-3 {
  padding-left: var(--spacing-3) !important;
}

.pr-3 {
  padding-right: var(--spacing-3) !important;
}

.px-3 {
  padding-left: var(--spacing-3) !important;
  padding-right: var(--spacing-3) !important;
}

.py-3 {
  padding-top: var(--spacing-3) !important;
  padding-bottom: var(--spacing-3) !important;
}

.p-4 {
  padding: var(--spacing-4) !important;
}

.pt-4 {
  padding-top: var(--spacing-4) !important;
}

.pb-4 {
  padding-bottom: var(--spacing-4) !important;
}

.pl-4 {
  padding-left: var(--spacing-4) !important;
}

.pr-4 {
  padding-right: var(--spacing-4) !important;
}

.px-4 {
  padding-left: var(--spacing-4) !important;
  padding-right: var(--spacing-4) !important;
}

.py-4 {
  padding-top: var(--spacing-4) !important;
  padding-bottom: var(--spacing-4) !important;
}

.p-5 {
  padding: var(--spacing-5) !important;
}

.pt-5 {
  padding-top: var(--spacing-5) !important;
}

.pb-5 {
  padding-bottom: var(--spacing-5) !important;
}

.pl-5 {
  padding-left: var(--spacing-5) !important;
}

.pr-5 {
  padding-right: var(--spacing-5) !important;
}

.px-5 {
  padding-left: var(--spacing-5) !important;
  padding-right: var(--spacing-5) !important;
}

.py-5 {
  padding-top: var(--spacing-5) !important;
  padding-bottom: var(--spacing-5) !important;
}

.p-6 {
  padding: var(--spacing-6) !important;
}

.pt-6 {
  padding-top: var(--spacing-6) !important;
}

.pb-6 {
  padding-bottom: var(--spacing-6) !important;
}

.pl-6 {
  padding-left: var(--spacing-6) !important;
}

.pr-6 {
  padding-right: var(--spacing-6) !important;
}

.px-6 {
  padding-left: var(--spacing-6) !important;
  padding-right: var(--spacing-6) !important;
}

.py-6 {
  padding-top: var(--spacing-6) !important;
  padding-bottom: var(--spacing-6) !important;
}

.p-8 {
  padding: var(--spacing-8) !important;
}

.pt-8 {
  padding-top: var(--spacing-8) !important;
}

.pb-8 {
  padding-bottom: var(--spacing-8) !important;
}

.pl-8 {
  padding-left: var(--spacing-8) !important;
}

.pr-8 {
  padding-right: var(--spacing-8) !important;
}

.px-8 {
  padding-left: var(--spacing-8) !important;
  padding-right: var(--spacing-8) !important;
}

.py-8 {
  padding-top: var(--spacing-8) !important;
  padding-bottom: var(--spacing-8) !important;
}

.p-10 {
  padding: var(--spacing-10) !important;
}

.pt-10 {
  padding-top: var(--spacing-10) !important;
}

.pb-10 {
  padding-bottom: var(--spacing-10) !important;
}

.pl-10 {
  padding-left: var(--spacing-10) !important;
}

.pr-10 {
  padding-right: var(--spacing-10) !important;
}

.px-10 {
  padding-left: var(--spacing-10) !important;
  padding-right: var(--spacing-10) !important;
}

.py-10 {
  padding-top: var(--spacing-10) !important;
  padding-bottom: var(--spacing-10) !important;
}

.p-12 {
  padding: var(--spacing-12) !important;
}

.pt-12 {
  padding-top: var(--spacing-12) !important;
}

.pb-12 {
  padding-bottom: var(--spacing-12) !important;
}

.pl-12 {
  padding-left: var(--spacing-12) !important;
}

.pr-12 {
  padding-right: var(--spacing-12) !important;
}

.px-12 {
  padding-left: var(--spacing-12) !important;
  padding-right: var(--spacing-12) !important;
}

.py-12 {
  padding-top: var(--spacing-12) !important;
  padding-bottom: var(--spacing-12) !important;
}

.p-16 {
  padding: var(--spacing-16) !important;
}

.pt-16 {
  padding-top: var(--spacing-16) !important;
}

.pb-16 {
  padding-bottom: var(--spacing-16) !important;
}

.pl-16 {
  padding-left: var(--spacing-16) !important;
}

.pr-16 {
  padding-right: var(--spacing-16) !important;
}

.px-16 {
  padding-left: var(--spacing-16) !important;
  padding-right: var(--spacing-16) !important;
}

.py-16 {
  padding-top: var(--spacing-16) !important;
  padding-bottom: var(--spacing-16) !important;
}