@use "sass:map";
@use "../abstracts/fonts" as fonts;
@use "../abstracts/responsive" as responsive;
@use "../abstracts/colors" as colors;

/* Base Typography Styles
-------------------------------------------------- */
html {
  font-family: fonts.$font-family-base;
  font-size: 100%; // 16px
  line-height: fonts.$line-height-base;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

body {
  font-family: fonts.$font-family-base;
  font-weight: fonts.$font-weight-normal;
  color: colors.getColor(Black);
}

/* Headings
-------------------------------------------------- */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: fonts.$font-family-heading;
  font-weight: fonts.$heading-font-weight;
  line-height: fonts.$heading-line-height;
  letter-spacing: fonts.$heading-letter-spacing;
  margin-top: 0;
  margin-bottom: 0.5em;
  color: colors.getColor(Black);
}

h1 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h1"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h1"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h1"), "lg");
  }
}

h2 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h2"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h2"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h2"), "lg");
  }
}

h3 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h3"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h3"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h3"), "lg");
  }
}

h4 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h4"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h4"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h4"), "lg");
  }
}

h5 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h5"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h5"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h5"), "lg");
  }
}

h6 {
  font-size: map.get(map.get(fonts.$heading-sizes, "h6"), "base");

  @include responsive.breakpoint("md") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h6"), "md");
  }

  @include responsive.breakpoint("lg") {
    font-size: map.get(map.get(fonts.$heading-sizes, "h6"), "lg");
  }
}

/* Paragraphs and Text Elements
-------------------------------------------------- */
p {
  margin-top: 0;
  margin-bottom: 1em;
  max-width: 70ch; // Optimal reading length

  &:last-child {
    margin-bottom: 0;
  }
}

.lead {
  font-size: fonts.$font-size-lg;
  line-height: fonts.$line-height-snug;

  @include responsive.breakpoint("md") {
    font-size: fonts.$font-size-xl;
  }
}

small,
.text-small {
  font-size: fonts.$font-size-sm;
}

.text-xs {
  font-size: fonts.$font-size-xs;
}

/* Links
-------------------------------------------------- */
a {
  color: colors.getColor(Primary);
  text-decoration: underline;
  text-underline-offset: 0.15em;
  transition: color 0.2s ease, text-decoration-color 0.2s ease;

  &:hover {
    color: colors.getColorWithOpacity(Primary, 0.8);
  }

  &:focus-visible {
    outline: 2px solid colors.getColor(Primary);
    outline-offset: 2px;
  }
}

/* Blockquotes
-------------------------------------------------- */
blockquote {
  margin: 1.5em 0;
  padding: 0.5em 0 0.5em 1.5em;
  border-left: 4px solid colors.getColor(Light-400);
  font-style: italic;
  color: colors.getColor(Dark-600);

  p {
    margin-bottom: 0.5em;
  }

  cite {
    display: block;
    font-size: fonts.$font-size-sm;
    font-style: normal;
    color: colors.getColor(Dark-400);
    margin-top: 0.5em;
  }
}

/* Code
-------------------------------------------------- */
code,
pre,
kbd,
samp {
  font-family: fonts.$font-family-mono;
  font-size: 0.9em;
}

code {
  padding: 0.2em 0.4em;
  background-color: colors.getColor(Light-200);
  border-radius: 3px;
}

pre {
  padding: 1em;
  overflow: auto;
  background-color: colors.getColor(Light-200);
  border-radius: 4px;

  code {
    padding: 0;
    background-color: transparent;
  }
}

/* Text Utilities
-------------------------------------------------- */
.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-uppercase {
  text-transform: uppercase;
  letter-spacing: fonts.$letter-spacing-wide;
}

.text-truncated {
  @include fonts.text-truncate;
}

.text-bold {
  font-weight: fonts.$font-weight-bold;
}

.text-medium {
  font-weight: fonts.$font-weight-medium;
}

.text-nowrap {
  white-space: nowrap;
}

.text-muted {
  color: colors.getColor(Dark-400);
}

.text-black {
  color: colors.getColor(Primary);
}

.text-success {
  color: colors.getColor(Success);
}

.text-danger {
  color: colors.getColor(Danger);
}

.text-warning {
  color: colors.getColor(Warning);
}

.text-info {
  color: colors.getColor(Info);
}
