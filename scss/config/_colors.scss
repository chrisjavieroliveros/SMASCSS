/**
 * COLOR CONFIGURATION
 * ------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/colors';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-color-variables();
 * 
 * 3. Use colors in your SCSS:
 *    - Function: color: color('primary');      // Returns #314459
 *    - Function: border: 1px solid color('primary-300');  // Uses shade variant
 *    - Variable: background: var(--color-primary);  // Use CSS variable
 *    - Opacity: background: color-alpha('primary', 0.5);  // 50% opacity
 * 
 * 4. For theme variations:
 *    .dark-theme { background: var(--color-dark-800); }
 */

// Color palette
$colors: (
  // Primary Color Semantic
  "primary": #314459,
  "primary-tint": #4a637f,
  "primary-shade": #1f2c3a,
  "primary-contrast": #ffffff,

  // Primary Color Variants
  "primary-50": #e6ebf1,
  "primary-100": #cdd7e3,
  "primary-200": #9fb3c8,
  "primary-300": #718fac,
  "primary-400": #4a637f,
  "primary-500": #314459,
  "primary-600": #28394b,
  "primary-700": #1f2c3a,
  "primary-800": #16202a,
  "primary-900": #0d141a,
  "primary-950": #070c10,

  // Secondary Color Semantic
  "secondary": #2a8de9,
  "secondary-tint": #5eabef,
  "secondary-shade": #1971c2,
  "secondary-contrast": #ffffff,

  // Secondary Color Variants
  "secondary-50": #e3f2fd,
  "secondary-100": #bbdefb,
  "secondary-200": #90caf9,
  "secondary-300": #64b5f6,
  "secondary-400": #42a5f5,
  "secondary-500": #2a8de9,
  "secondary-600": #1e7bd6,
  "secondary-700": #1971c2,
  "secondary-800": #155fae,
  "secondary-900": #104b8a,
  "secondary-950": #0a2f5c,

  // State Color: Danger Semantic
  "danger": #e63946,
  "danger-tint": #f06a75,
  "danger-shade": #a52833,
  "danger-contrast": #ffffff,

  // State Color: Warning Semantic
  "warning": #ffb703,
  "warning-tint": #ffc733,
  "warning-shade": #cc9202,
  "warning-contrast": #000000,

  // State Color: Success Semantic
  "success": #2a9d8f,
  "success-tint": #56b3a7,
  "success-shade": #1f7468,
  "success-contrast": #ffffff,

  // State Color: Info Semantic
  "info": #219ebc,
  "info-tint": #4fb3d1,
  "info-shade": #197a91,
  "info-contrast": #ffffff,

  // Neutral Color: Light
  "light-50": #fefefe,
  "light-100": #fafafa,
  "light-200": #f5f5f5,
  "light-300": #ebebeb,
  "light-400": #e0e0e0,
  "light-500": #d6d6d6,
  "light-600": #cccccc,
  "light-700": #c2c2c2,
  "light-800": #b8b8b8,
  "light-900": #adadad,
  "light-950": #a3a3a3,

  // Neutral Color: Dark
  "dark-50": #ababab,
  "dark-100": #a1a1a1,
  "dark-200": #8e8e8e,
  "dark-300": #7c7c7c,
  "dark-400": #6a6a6a,
  "dark-500": #585858,
  "dark-600": #464646,
  "dark-700": #343434,
  "dark-800": #222222,
  "dark-900": #101010,
  "dark-950": #050505,

  "black": #272727,
  "white": #ffffff
);

/**
 * Function to get color value
 * @param {String} $name - The color name from the $colors map
 * @return {Color} The color value
 * @example color: color('primary');      // Returns #314459
 */
@function color($name) {
  @if map-has-key($colors, $name) {
    @return map-get($colors, $name);
  }
  @error "Color '#{$name}' not found in color map.";
  @return null;
}

/**
 * Function to get color with opacity
 * @param {String} $name - The color name from the $colors map
 * @param {Number} $alpha - Opacity value between 0 and 1
 * @return {Color} The rgba color value with opacity
 * @example background: color-alpha('primary', 0.5); // Returns rgba(49, 68, 89, 0.5)
 */
@function color-alpha($name, $alpha) {
  $color: color($name);
  @return rgba($color, $alpha);
}

/**
 * Generate CSS color variables
 * Creates: --color-X variables
 * @example @include generate-color-variables();
 */
@mixin generate-color-variables() {
  :root {
    @each $name, $value in $colors {
      --color-#{$name}: #{$value};
    }
  }
}
