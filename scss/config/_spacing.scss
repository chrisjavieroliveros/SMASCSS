/**
 * SPACING CONFIGURATION
 * ---------------------
 * 
 * USAGE:
 * 1. Import this file: @import 'config/spacing';
 * 
 * 2. Generate CSS variables in your root file:
 *    @include generate-spacing-variables();
 * 
 * 3. Use spacing in your SCSS:
 *    - Function: margin: spacing(4);      // Returns 1rem
 *    - Function: padding: spacing('sm');  // Returns 1rem using alias
 *    - Variable: gap: var(--spacing-6);   // Use CSS variable
 * 
 * 4. For container padding:
 *    padding: var(--container-padding-md); // Responsive padding
 */

// Base spacing unit (1rem = 16px by default)
$base-spacing: 1rem;

// Spacing scale
$spacing: (
  "0": 0,
  "1": 0.25rem,
  // 4px
  "2": 0.5rem,
  // 8px
  "3": 0.75rem,
  // 12px
  "4": 1rem,
  // 16px
  "5": 1.5rem,
  // 24px
  "6": 2rem,
  // 32px
  "8": 3rem,
  // 48px
  "10": 4rem,
  // 64px
  "12": 6rem,
  // 96px
  "16": 8rem,
  // 128px
);

// Spacing aliases for common use cases
$spacing-aliases: (
  "xs": "1",
  // 0.25rem
  "sm": "4",
  // 1rem
  "md": "6",
  // 2rem
  "lg": "8",
  // 3rem
  "xl": "12",
  // 6rem
);

// Container padding responsive scale
$container-padding: (
  "sm": var(--spacing-4),
  // Small screens: 1rem
  "md": var(--spacing-6),
  // Medium screens: 2rem
  "lg": var(--spacing-8),
  // Large screens: 3rem
);

/**
 * Function to get spacing value
 * @param {String|Number} $key - The spacing key or alias
 * @return {Number} The spacing value in rem
 * @example padding: spacing(4);      // Returns 1rem
 * @example margin: spacing('sm');    // Returns 1rem via alias
 */
@function spacing($key) {

  // Check if it's an alias first
  @if map-has-key($spacing-aliases, $key) {
    $alias-key: map-get($spacing-aliases, $key);

    @if map-has-key($spacing, $alias-key) {
      @return map-get($spacing, $alias-key);
    }
  }

  // Check if it's a direct key
  @if map-has-key($spacing, $key) {
    @return map-get($spacing, $key);
  }

  @error "Spacing key '#{$key}' not found in spacing map.";
  @return null;
}

/**
 * Generate CSS spacing variables
 * Creates CSS custom properties for all spacing values
 * @example @include generate-spacing-variables();
 */
@mixin generate-spacing-variables() {
  :root {
    @each $name, $value in $spacing {
      --spacing-#{$name}: #{$value};
    }

    @each $name, $value in $container-padding {
      --container-padding-#{$name}: #{$value};
    }
  }
}

// Generate CSS variables
@include generate-spacing-variables();