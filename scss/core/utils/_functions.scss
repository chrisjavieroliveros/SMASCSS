// Define the getColor function
@function getColor($colorName, $opacity: 100%) {
  @if not map-has-key($colors, $colorName) {
    @warn "Unknown color `#{$colorName}`. Please check your color map.";
    @return null;
  }
  // Return the hex value instead of rgba
  @return map-get($colors, $colorName);
}

@function getVarColor($colorName) {
  @return var(--color-#{$colorName});
}

// Define the tint function
@function tint($color, $amount) {
  // getColor might return a hex color or rgba
  @if type-of($color) == color {
    // If it's a hex value, proceed as before
    @return mix(white, $color, $amount * 1%);
  } @else if type-of($color) == string {
    // If it's rgba(...) convert to color type first
    $rgbaValues: "";
    @for $i from 1 through 4 {
      $rgbaValues: append($rgbaValues, nth(str-split($color, ","), $i), ",");
    }

    $rgbaValues: trim($rgbaValues, ", "); // Remove extra comma at the end

    @return mix(white, color($rgbaValues), $amount * 1%);
  } @else {
    @warn "Invalid color format passed to tint.";
    @return null;
  }
}

// Define the shade function with adjustments
@function shade($color, $amount) {
  // getColor might return a hex color or rgba
  @if type-of($color) == color {
    // If it's a hex value, proceed as before
    @return mix(black, $color, $amount * 1%);
  } @else if type-of($color) == string {
    // If it's rgba(...) convert to color type first
    $rgbaValues: "";
    @for $i from 1 through 4 {
      $rgbaValues: append($rgbaValues, nth(str-split($color, ","), $i), ",");
    }

    $rgbaValues: trim($rgbaValues, ", "); // Remove extra comma at the end

    @return mix(black, color($rgbaValues), $amount * 1%);
  } @else {
    @warn "Invalid color format passed to shade.";
    @return null;
  }
}
