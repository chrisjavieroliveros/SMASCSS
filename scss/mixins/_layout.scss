/**
 * LAYOUT UTILITIES
 * ----------------
 * 
 * Functions and mixins for layout-related calculations and utilities
 * 
 * USAGE:
 * @use "../mixins/layout" as layout;
 * $fluid: layout.fluid-space(1rem, 2rem, 320px, 1200px);
 * @include layout.aspect-ratio(16/9);
 * @include layout.clearfix;
 */

@use "unit-conversion" as units;

/**
 * Calculate fluid spacing between two breakpoints
 * @param {Number} $min-value - Minimum value
 * @param {Number} $max-value - Maximum value
 * @param {Number} $min-breakpoint - Minimum breakpoint
 * @param {Number} $max-breakpoint - Maximum breakpoint
 * @return {String} - CSS clamp() function
 * @example $fluid: fluid-space(1rem, 2rem, 320px, 1200px);
 */
@function fluid-space(
  $min-value,
  $max-value,
  $min-breakpoint: 320px,
  $max-breakpoint: 1200px
) {
  $min-value-unitless: units.strip-unit($min-value);
  $max-value-unitless: units.strip-unit($max-value);
  $min-breakpoint-unitless: units.strip-unit($min-breakpoint);
  $max-breakpoint-unitless: units.strip-unit($max-breakpoint);

  $slope: ($max-value-unitless - $min-value-unitless) /
    ($max-breakpoint-unitless - $min-breakpoint-unitless);
  $y-intercept: $min-value-unitless - ($slope * $min-breakpoint-unitless);

  @return clamp(
    #{$min-value},
    #{$y-intercept}px + #{$slope * 100}vw,
    #{$max-value}
  );
}

/**
 * Aspect ratio mixin
 * @param {Number} $ratio - Aspect ratio (width/height)
 * @example @include aspect-ratio(16/9);
 */
@mixin aspect-ratio($ratio) {
  aspect-ratio: $ratio;
}

/**
 * Clear fix for floated elements
 * @example @include clearfix;
 */
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}
