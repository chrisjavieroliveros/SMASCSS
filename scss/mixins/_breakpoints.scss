/**
 * BREAKPOINT MIXINS
 * -----------------
 * 
 * Responsive breakpoint utilities for media queries
 * Mobile-first approach using min-width media queries
 * 
 * USAGE:
 * @use "../mixins/breakpoints" as bp;
 * @include bp.breakpoint-up("md") { display: flex; }    // Mobile-first (min-width)
 * @include bp.breakpoint-down("lg") { display: block; } // Desktop-first (max-width)
 * @include bp.breakpoint-only("md") { display: grid; }  // Only at specific breakpoint
 * @include bp.breakpoint-between("sm", "lg") { ... }    // Between two breakpoints
 */

@use "../config/breakpoints" as breakpoints;

/**
 * Mobile-first breakpoint mixin (min-width)
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint-up("md") { display: flex; }
 */
@mixin breakpoint-up($size) {
  @if map-has-key(breakpoints.$breakpoints, $size) {
    @media (min-width: breakpoints.breakpoint($size)) {
      @content;
    }
  } @else {
    @error "Breakpoint '#{$size}' not found in breakpoints map.";
  }
}

/**
 * Desktop-first breakpoint mixin (max-width)
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint-down("lg") { display: block; }
 */
@mixin breakpoint-down($size) {
  @if map-has-key(breakpoints.$breakpoints, $size) {
    $breakpoint-value: breakpoints.breakpoint($size);

    @media (max-width: calc(#{$breakpoint-value} - 0.02px)) {
      @content;
    }
  } @else {
    @error "Breakpoint '#{$size}' not found in breakpoints map.";
  }
}

/**
 * Breakpoint for specific size only
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint-only("md") { display: grid; }
 */
@mixin breakpoint-only($size) {
  @if map-has-key(breakpoints.$breakpoints, $size) {
    $breakpoint-names: map-keys(breakpoints.$breakpoints);
    $breakpoint-index: index($breakpoint-names, $size);

    @if $breakpoint-index < length($breakpoint-names) {
      $next-breakpoint: nth($breakpoint-names, $breakpoint-index + 1);
      $min-width: breakpoints.breakpoint($size);
      $max-width: calc(#{breakpoints.breakpoint($next-breakpoint)} - 0.02px);

      @media (min-width: #{$min-width}) and (max-width: #{$max-width}) {
        @content;
      }
    } @else {
      @media (min-width: breakpoints.breakpoint($size)) {
        @content;
      }
    }
  } @else {
    @error "Breakpoint '#{$size}' not found in breakpoints map.";
  }
}

/**
 * Breakpoint between two sizes
 * @param {String} $min-size - Minimum breakpoint size name
 * @param {String} $max-size - Maximum breakpoint size name
 * @example @include breakpoint-between("sm", "lg") { ... }
 */
@mixin breakpoint-between($min-size, $max-size) {
  @if map-has-key(breakpoints.$breakpoints, $min-size) and
    map-has-key(breakpoints.$breakpoints, $max-size)
  {
    $min-width: breakpoints.breakpoint($min-size);
    $max-width: calc(#{breakpoints.breakpoint($max-size)} - 0.02px);

    @media (min-width: #{$min-width}) and (max-width: #{$max-width}) {
      @content;
    }
  } @else {
    @error "One or both breakpoints not found in breakpoints map.";
  }
}

/**
 * Legacy breakpoint mixin (now uses mobile-first approach)
 * @param {String} $size - Breakpoint size name
 * @example @include breakpoint("md") { display: flex; }
 * @deprecated Use breakpoint-up() for mobile-first or breakpoint-down() for desktop-first
 */
@mixin breakpoint($size) {
  @include breakpoint-up($size) {
    @content;
  }
}
