@use "sass:map";

// Color palette map
$colors: (
  // Primary, Secondary, Tertiary
  Primary: #314459,
  Primary-Tint: #e6eaef,
  Primary-Shade: #253445,
  Primary-Contrast: #ffffff,

  Secondary: #2a8de9,
  Secondary-Tint: #e1f0fc,
  Secondary-Shade: #2170ba,
  Secondary-Contrast: #ffffff,

  Tertiary: #ffc209,
  Tertiary-Tint: #fff6dc,
  Tertiary-Shade: #cc9b07,
  Tertiary-Contrast: #000000,

  // Status
  Danger: #f43f5e,
  Warning: #f59e0b,
  Success: #10b981,
  Info: #3b82f6,

  // Base
  Black: #272727,
  White: #ffffff,

  // Light
  Light-50: #fdfdfd,
  Light-100: #fafafa,
  Light-200: #f5f5f5,
  Light-300: #ebebeb,
  Light-400: #e0e0e0,
  Light-500: #d6d6d6,
  Light-600: #c2c2c2,
  Light-700: #b0b0b0,
  Light-800: #a0a0a0,
  Light-900: #8f8f8f,
  Light-950: #858585,

  // Dark
  Dark-50: #7a7a7a,
  Dark-100: #6f6f6f,
  Dark-200: #606060,
  Dark-300: #555555,
  Dark-400: #494949,
  Dark-500: #3d3d3d,
  Dark-600: #323232,
  Dark-700: #292929,
  Dark-800: #1f1f1f,
  Dark-900: #141414,
  Dark-950: #0a0a0a // Darkest dark
) !default;

// Function to get color from the map
@function getColor($color-name) {
  @if map.has-key($colors, $color-name) {
    @return map.get($colors, $color-name);
  } @else {
    @error "Color '#{$color-name}' not found in the colors map.";
    @return null;
  }
}

// Function to get color with opacity
@function getColorWithOpacity($color-name, $opacity) {
  $color: getColor($color-name);
  @return rgba($color, $opacity);
}

// Generate CSS Variables based on the colors map
@mixin generate-color-variables() {
  @each $colorName, $color in $colors {
    --color-#{'' + $colorName}: #{$color};
  }
}
