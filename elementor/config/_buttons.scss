/**
 * Button Configuration
 */

// Button sizes
$button-sizes: (
  "default": ("padding-y": "2",
    "padding-x": "4",
    "border-radius": "0.375rem",
    "font-weight": "medium",
    "font-size": "base",
    "transition": "all 0.2s ease-in-out",
  ),
  "sm": ("padding-y": "1",
    "padding-x": "3",
    "font-size": "sm",
  ),
  "lg": ("padding-y": "3",
    "padding-x": "6",
    "font-size": "lg",
  ),
);

// Function to get button property
@function button-property($size, $property) {
  @if map-has-key($button-sizes, $size) and map-has-key(map-get($button-sizes, $size), $property) {
    @return map-get(map-get($button-sizes, $size), $property);
  }

  @error "Button property '#{$property}' not found for size '#{$size}'.";
  @return null;
}

/**
 * Generate CSS button variables
 * Creates CSS custom properties for all button configurations
 * @example @include generate-button-variables();
 */
@mixin generate-button-variables() {
  :root {

    // Sizes
    @each $size, $properties in $button-sizes {
      @each $property, $value in $properties {
        @if $property =="font-size" {
          --button-#{$size}-#{$property}: var(--font-size-#{$value});
        }

        @else if $property =="padding-y" or $property =="padding-x" {
          --button-#{$size}-#{$property}: var(--spacing-#{$value});
        }

        @else {
          --button-#{$size}-#{$property}: #{$value};
        }
      }
    }
  }
}

// Generate CSS variables
@include generate-button-variables();